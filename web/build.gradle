buildscript {
    ext {
        springBootVersion = '3.2.0'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        // random edit
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'war'
    id 'org.springframework.boot' version "${springBootVersion}"
/*
 * The dependency management plugin remains a transitive dependency of spring-boot-gradle-plugin
 * so thereâ€™s no need for it to be listed as a classpath dependency in the buildscript configuration.
 */
    id 'io.spring.dependency-management' version '1.1.4'
    id 'maven-publish'
}

java {
    sourceCompatibility = 17
    targetCompatibility = 17
}

// Fix for log4j vulnerability, remove when updating spring boot version
ext['log4j2.version'] = '2.17.1'

def bomVersion = "2023.0.0"

group = "gov.nih.nci.term.browser.web"
version = "2.1.0.RELEASE"

springBoot {
    buildInfo()          // generate file META-INF/build-info.properties during the build
}

// Java Toolchain to detect which version of Java to use, if not present
// it will automatically download and install the required version of Java
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url "https://repo.spring.io/release" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/snapshot" }
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-gateway-mvc'
		
    implementation 'ch.qos.logback:logback-classic:1.4.14' // Updated version
    implementation 'ch.qos.logback:logback-core:1.4.14' // Updated version
    implementation 'org.springframework.boot:spring-boot-starter-tomcat:3.2.10' // Updated version
    implementation 'org.apache.tomcat:tomcat-annotations-api:10.1.30' // Updated version
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.1.34' // Updated version
    implementation 'org.apache.tomcat.embed:tomcat-embed-el:10.1.34' // Updated version
    implementation 'org.apache.tomcat.embed:tomcat-embed-websocket:10.1.34' // Updated version
    implementation 'org.springframework:spring-web:6.1.14' // Updated version
    implementation 'org.springframework:spring-webmvc:6.1.14' // Updated version
    // fixes netty resolver error for macos
    implementation 'io.netty:netty-common:4.1.115.Final'
    implementation 'io.netty:netty-resolver-dns-native-macos'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
      exclude group: "net.minidev", module: "json-smart"
    }
}

jar {
    archiveBaseName = project.name
    version = project.version
    manifest {
        attributes 'Main-Class': 'main.java.gov.nih.evsexplore.web.Application'
    }
}

jar {
    from('frontend/dist') {
        //Public is a default supported Spring Boot resources directory.
        into 'public'
    }
}

//frontend:build will be run before the processResources
processResources.dependsOn('frontend:build')

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$bomVersion"
    }
}


test {
    /*
     * Configure gradle to show standard out and standard error
     * of the test JVM(s) on the console
     */
    testLogging.showStandardStreams = true


}

tasks.register('zipFile', Zip) {
    def zipFileRootDirectory = "${project.name}-${project.version}"

    from('src/main/bin') {
        fileMode = 0755
        into "$zipFileRootDirectory/bin"
    }
    from("$buildDir/libs") {
        include '*.war'
        into "$zipFileRootDirectory/lib"
    }
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}


zipFile.dependsOn = [bootWar]
build.dependsOn = [test, bootWar, zipFile]
publishToMavenLocal.dependsOn = [bootWar, zipFile]

dependencyLocking {
  lockAllConfigurations()
}
